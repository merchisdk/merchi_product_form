'use client';

import { FieldType } from './types';
import { VariationCheckbox, VariationRadio } from './VariationCheckboxRadio';
import VariationFileInput from './VariationFileInput';
import AlertVariationSellerEditable from './AlertVariationSellerEditable';
import VariationFieldInstructions from './VariationFieldInstructions';
import VariationFieldStaticValues from './VariationFieldStaticValues';
import VariationSelect from './VariationSelect';
import { VariationInputCoulourPicker, VariationInputTextarea, VariationInputText, VariationInputNumber } from './VariationInput';
import { VariationSelectColour, VariationSelectImage } from './VariationSelectElements';
import { useMerchiFormContext } from './MerchiProductFormProvider';
import { jsx as _jsx } from "react/jsx-runtime";
import { Fragment as _Fragment } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
var fieldMaps = new Map();
fieldMaps.set(FieldType.CHECKBOX, VariationCheckbox);
fieldMaps.set(FieldType.COLOUR_PICKER, VariationInputCoulourPicker);
fieldMaps.set(FieldType.FILE_UPLOAD, VariationFileInput);
fieldMaps.set(FieldType.COLOUR_SELECT, VariationSelectColour);
fieldMaps.set(FieldType.IMAGE_SELECT, VariationSelectImage);
fieldMaps.set(FieldType.RADIO, VariationRadio);
fieldMaps.set(FieldType.SELECT, VariationSelect);
fieldMaps.set(FieldType.TEXT_AREA, VariationInputTextarea);
fieldMaps.set(FieldType.TEXT_INPUT, VariationInputText);
fieldMaps.set(FieldType.NUMBER_INPUT, VariationInputNumber);
fieldMaps.set(FieldType.FIELD_INSTRUCTIONS, VariationFieldInstructions);
function DynamicVariationInput(_ref) {
  var disabled = _ref.disabled,
    index = _ref.index,
    name = _ref.name,
    variation = _ref.variation;
  var _useMerchiFormContext = useMerchiFormContext(),
    showAlert = _useMerchiFormContext.showAlert;
  var variationField = variation.variationField;
  var fieldType = variationField.fieldType;
  var Variation = fieldMaps.get(parseInt(fieldType, 10));
  return /*#__PURE__*/_jsxs(_Fragment, {
    children: [/*#__PURE__*/_jsx(VariationFieldStaticValues, {
      index: index,
      name: name,
      variation: variation
    }), /*#__PURE__*/_jsx(AlertVariationSellerEditable, {
      variationField: variationField
    }), /*#__PURE__*/_jsx(Variation, {
      alertErrorCallback: showAlert,
      disabled: disabled,
      name: "".concat(name, "[").concat(index, "]"),
      variation: variation
    })]
  });
}
export default DynamicVariationInput;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJGaWVsZFR5cGUiLCJWYXJpYXRpb25DaGVja2JveCIsIlZhcmlhdGlvblJhZGlvIiwiVmFyaWF0aW9uRmlsZUlucHV0IiwiQWxlcnRWYXJpYXRpb25TZWxsZXJFZGl0YWJsZSIsIlZhcmlhdGlvbkZpZWxkSW5zdHJ1Y3Rpb25zIiwiVmFyaWF0aW9uRmllbGRTdGF0aWNWYWx1ZXMiLCJWYXJpYXRpb25TZWxlY3QiLCJWYXJpYXRpb25JbnB1dENvdWxvdXJQaWNrZXIiLCJWYXJpYXRpb25JbnB1dFRleHRhcmVhIiwiVmFyaWF0aW9uSW5wdXRUZXh0IiwiVmFyaWF0aW9uSW5wdXROdW1iZXIiLCJWYXJpYXRpb25TZWxlY3RDb2xvdXIiLCJWYXJpYXRpb25TZWxlY3RJbWFnZSIsInVzZU1lcmNoaUZvcm1Db250ZXh0IiwianN4IiwiX2pzeCIsIkZyYWdtZW50IiwiX0ZyYWdtZW50IiwianN4cyIsIl9qc3hzIiwiZmllbGRNYXBzIiwiTWFwIiwic2V0IiwiQ0hFQ0tCT1giLCJDT0xPVVJfUElDS0VSIiwiRklMRV9VUExPQUQiLCJDT0xPVVJfU0VMRUNUIiwiSU1BR0VfU0VMRUNUIiwiUkFESU8iLCJTRUxFQ1QiLCJURVhUX0FSRUEiLCJURVhUX0lOUFVUIiwiTlVNQkVSX0lOUFVUIiwiRklFTERfSU5TVFJVQ1RJT05TIiwiRHluYW1pY1ZhcmlhdGlvbklucHV0IiwiX3JlZiIsImRpc2FibGVkIiwiaW5kZXgiLCJuYW1lIiwidmFyaWF0aW9uIiwiX3VzZU1lcmNoaUZvcm1Db250ZXh0Iiwic2hvd0FsZXJ0IiwidmFyaWF0aW9uRmllbGQiLCJmaWVsZFR5cGUiLCJWYXJpYXRpb24iLCJnZXQiLCJwYXJzZUludCIsImNoaWxkcmVuIiwiYWxlcnRFcnJvckNhbGxiYWNrIiwiY29uY2F0Il0sInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NvbXBvbmVudHMvRHluYW1pY1ZhcmlhdGlvbklucHV0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIGNsaWVudCc7XG5pbXBvcnQgeyBGaWVsZFR5cGUgfSBmcm9tICcuL3R5cGVzJztcbmltcG9ydCB7XG4gIFZhcmlhdGlvbkNoZWNrYm94LFxuICBWYXJpYXRpb25SYWRpbyxcbn0gZnJvbSAnLi9WYXJpYXRpb25DaGVja2JveFJhZGlvJztcbmltcG9ydCBWYXJpYXRpb25GaWxlSW5wdXQgZnJvbSAnLi9WYXJpYXRpb25GaWxlSW5wdXQnO1xuaW1wb3J0IEFsZXJ0VmFyaWF0aW9uU2VsbGVyRWRpdGFibGUgZnJvbSAnLi9BbGVydFZhcmlhdGlvblNlbGxlckVkaXRhYmxlJztcbmltcG9ydCBWYXJpYXRpb25GaWVsZEluc3RydWN0aW9ucyBmcm9tICcuL1ZhcmlhdGlvbkZpZWxkSW5zdHJ1Y3Rpb25zJztcbmltcG9ydCBWYXJpYXRpb25GaWVsZFN0YXRpY1ZhbHVlcyBmcm9tICcuL1ZhcmlhdGlvbkZpZWxkU3RhdGljVmFsdWVzJztcbmltcG9ydCBWYXJpYXRpb25TZWxlY3QgZnJvbSAnLi9WYXJpYXRpb25TZWxlY3QnO1xuaW1wb3J0IHtcbiAgVmFyaWF0aW9uSW5wdXRDb3Vsb3VyUGlja2VyLFxuICBWYXJpYXRpb25JbnB1dFRleHRhcmVhLFxuICBWYXJpYXRpb25JbnB1dFRleHQsXG4gIFZhcmlhdGlvbklucHV0TnVtYmVyLFxufSBmcm9tICcuL1ZhcmlhdGlvbklucHV0JztcbmltcG9ydCB7XG4gIFZhcmlhdGlvblNlbGVjdENvbG91cixcbiAgVmFyaWF0aW9uU2VsZWN0SW1hZ2UsXG59IGZyb20gJy4vVmFyaWF0aW9uU2VsZWN0RWxlbWVudHMnO1xuaW1wb3J0IHsgdXNlTWVyY2hpRm9ybUNvbnRleHQgfSBmcm9tICcuL01lcmNoaVByb2R1Y3RGb3JtUHJvdmlkZXInO1xuXG5jb25zdCBmaWVsZE1hcHMgPSBuZXcgTWFwKCk7XG5maWVsZE1hcHMuc2V0KEZpZWxkVHlwZS5DSEVDS0JPWCwgVmFyaWF0aW9uQ2hlY2tib3gpO1xuZmllbGRNYXBzLnNldChGaWVsZFR5cGUuQ09MT1VSX1BJQ0tFUiwgVmFyaWF0aW9uSW5wdXRDb3Vsb3VyUGlja2VyKTtcbmZpZWxkTWFwcy5zZXQoRmllbGRUeXBlLkZJTEVfVVBMT0FELCBWYXJpYXRpb25GaWxlSW5wdXQpO1xuZmllbGRNYXBzLnNldChGaWVsZFR5cGUuQ09MT1VSX1NFTEVDVCwgVmFyaWF0aW9uU2VsZWN0Q29sb3VyKTtcbmZpZWxkTWFwcy5zZXQoRmllbGRUeXBlLklNQUdFX1NFTEVDVCwgVmFyaWF0aW9uU2VsZWN0SW1hZ2UpO1xuZmllbGRNYXBzLnNldChGaWVsZFR5cGUuUkFESU8sIFZhcmlhdGlvblJhZGlvKTtcbmZpZWxkTWFwcy5zZXQoRmllbGRUeXBlLlNFTEVDVCwgVmFyaWF0aW9uU2VsZWN0KTtcbmZpZWxkTWFwcy5zZXQoRmllbGRUeXBlLlRFWFRfQVJFQSwgVmFyaWF0aW9uSW5wdXRUZXh0YXJlYSk7XG5maWVsZE1hcHMuc2V0KEZpZWxkVHlwZS5URVhUX0lOUFVULCBWYXJpYXRpb25JbnB1dFRleHQpO1xuZmllbGRNYXBzLnNldChGaWVsZFR5cGUuTlVNQkVSX0lOUFVULCBWYXJpYXRpb25JbnB1dE51bWJlcik7XG5maWVsZE1hcHMuc2V0KEZpZWxkVHlwZS5GSUVMRF9JTlNUUlVDVElPTlMsIFZhcmlhdGlvbkZpZWxkSW5zdHJ1Y3Rpb25zKTtcblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgZGlzYWJsZWQ/OiBib29sZWFuO1xuICBpbmRleDogbnVtYmVyO1xuICBuYW1lOiBzdHJpbmc7XG4gIHZhcmlhdGlvbjogYW55O1xufVxuXG5mdW5jdGlvbiBEeW5hbWljVmFyaWF0aW9uSW5wdXQoe1xuICBkaXNhYmxlZCxcbiAgaW5kZXgsXG4gIG5hbWUsXG4gIHZhcmlhdGlvbixcbn06IFByb3BzKSB7XG4gIGNvbnN0IHsgc2hvd0FsZXJ0IH0gPSB1c2VNZXJjaGlGb3JtQ29udGV4dCgpO1xuICBjb25zdCB7IHZhcmlhdGlvbkZpZWxkIH0gPSB2YXJpYXRpb247XG4gIGNvbnN0IHsgZmllbGRUeXBlICB9ID0gdmFyaWF0aW9uRmllbGQ7XG4gIGNvbnN0IFZhcmlhdGlvbiA9IGZpZWxkTWFwcy5nZXQocGFyc2VJbnQoZmllbGRUeXBlLCAxMCkpO1xuICByZXR1cm4gKFxuICAgIDw+XG4gICAgICA8VmFyaWF0aW9uRmllbGRTdGF0aWNWYWx1ZXNcbiAgICAgICAgaW5kZXg9e2luZGV4fVxuICAgICAgICBuYW1lPXtuYW1lfVxuICAgICAgICB2YXJpYXRpb249e3ZhcmlhdGlvbn1cbiAgICAgIC8+XG4gICAgICA8QWxlcnRWYXJpYXRpb25TZWxsZXJFZGl0YWJsZSB2YXJpYXRpb25GaWVsZD17dmFyaWF0aW9uRmllbGR9IC8+XG4gICAgICA8VmFyaWF0aW9uXG4gICAgICAgIGFsZXJ0RXJyb3JDYWxsYmFjaz17c2hvd0FsZXJ0fVxuICAgICAgICBkaXNhYmxlZD17ZGlzYWJsZWR9XG4gICAgICAgIG5hbWU9e2Ake25hbWV9WyR7aW5kZXh9XWB9XG4gICAgICAgIHZhcmlhdGlvbj17dmFyaWF0aW9ufVxuICAgICAgLz5cbiAgICA8Lz5cbiAgKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgRHluYW1pY1ZhcmlhdGlvbklucHV0O1xuIl0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZOztBQUNaLFNBQVNBLFNBQVMsUUFBUSxTQUFTO0FBQ25DLFNBQ0VDLGlCQUFpQixFQUNqQkMsY0FBYyxRQUNULDBCQUEwQjtBQUNqQyxPQUFPQyxrQkFBa0IsTUFBTSxzQkFBc0I7QUFDckQsT0FBT0MsNEJBQTRCLE1BQU0sZ0NBQWdDO0FBQ3pFLE9BQU9DLDBCQUEwQixNQUFNLDhCQUE4QjtBQUNyRSxPQUFPQywwQkFBMEIsTUFBTSw4QkFBOEI7QUFDckUsT0FBT0MsZUFBZSxNQUFNLG1CQUFtQjtBQUMvQyxTQUNFQywyQkFBMkIsRUFDM0JDLHNCQUFzQixFQUN0QkMsa0JBQWtCLEVBQ2xCQyxvQkFBb0IsUUFDZixrQkFBa0I7QUFDekIsU0FDRUMscUJBQXFCLEVBQ3JCQyxvQkFBb0IsUUFDZiwyQkFBMkI7QUFDbEMsU0FBU0Msb0JBQW9CLFFBQVEsNkJBQTZCO0FBQUMsU0FBQUMsR0FBQSxJQUFBQyxJQUFB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