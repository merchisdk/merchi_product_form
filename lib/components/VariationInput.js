'use client';

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
import { useController } from 'react-hook-form';
import VariationError from './VariationError';
import VariationLabel from './VariationLabel';
import { useMerchiFormContext } from './MerchiProductFormProvider';
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
var validationParams = function validationParams(variationField) {
  var name = variationField.name,
    max = variationField.fieldMax,
    min = variationField.fieldMin,
    required = variationField.required;
  return {
    max: {
      value: max,
      message: "".concat(name, " cannot be more than ").concat(max)
    },
    min: {
      value: min,
      message: "".concat(name, " cannot be less than ").concat(min)
    },
    required: {
      value: required,
      message: "".concat(name, " is required")
    }
  };
};
var VariationInput = function VariationInput(_ref) {
  var disabled = _ref.disabled,
    _ref$inputType = _ref.inputType,
    inputType = _ref$inputType === void 0 ? 'text' : _ref$inputType,
    name = _ref.name,
    variation = _ref.variation;
  var _useMerchiFormContext = useMerchiFormContext(),
    classNameInputContainer = _useMerchiFormContext.classNameInputContainer,
    classNameInput = _useMerchiFormContext.classNameInput,
    control = _useMerchiFormContext.control;
  var _useController = useController({
      name: name,
      control: control,
      rules: validationParams(variation.variationField)
    }),
    field = _useController.field,
    _useController$fieldS = _useController.fieldState,
    invalid = _useController$fieldS.invalid,
    error = _useController$fieldS.error;
  var value = variation.value,
    variationField = variation.variationField;
  var validationClass = invalid ? 'is-invalid' : '';
  return /*#__PURE__*/_jsxs("div", {
    className: "".concat(classNameInputContainer, " merchi-input-").concat(inputType, "-container"),
    children: [/*#__PURE__*/_jsx(VariationLabel, {
      variationClassName: "merchi-input-".concat(inputType),
      name: name,
      variation: variation
    }), inputType === 'textarea' ? /*#__PURE__*/_jsx("textarea", _objectSpread({
      defaultValue: value,
      disabled: disabled,
      className: "".concat(classNameInput, " ").concat(validationClass),
      rows: variationField.rows,
      placeholder: variationField.placeholder
    }, field)) : /*#__PURE__*/_jsx("input", _objectSpread({
      defaultValue: value,
      disabled: disabled,
      type: inputType,
      className: "".concat(classNameInput, " ").concat(validationClass),
      placeholder: variationField.placeholder
    }, field)), /*#__PURE__*/_jsx(VariationError, {
      name: name
    })]
  });
};
export var VariationInputCoulourPicker = function VariationInputCoulourPicker(props) {
  return /*#__PURE__*/_jsx(VariationInput, _objectSpread({
    inputType: "color"
  }, props));
};
export var VariationInputText = function VariationInputText(props) {
  return /*#__PURE__*/_jsx(VariationInput, _objectSpread({
    inputType: "text"
  }, props));
};
export var VariationInputNumber = function VariationInputNumber(props) {
  return /*#__PURE__*/_jsx(VariationInput, _objectSpread({
    inputType: "number"
  }, props));
};
export var VariationInputTextarea = function VariationInputTextarea(props) {
  return /*#__PURE__*/_jsx(VariationInput, _objectSpread({
    inputType: "textarea"
  }, props));
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,