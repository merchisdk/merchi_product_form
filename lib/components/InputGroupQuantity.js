'use client';

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
import { useController } from 'react-hook-form';
import VariationError from './VariationError';
import { useMerchiFormContext } from './MerchiProductFormProvider';
import { jsxs as _jsxs } from "react/jsx-runtime";
import { jsx as _jsx } from "react/jsx-runtime";
function InputGroupQuantity(_ref) {
  var count = _ref.count,
    disabled = _ref.disabled,
    name = _ref.name;
  var _useMerchiFormContext = useMerchiFormContext(),
    classNameInputContainer = _useMerchiFormContext.classNameInputContainer,
    classNameInput = _useMerchiFormContext.classNameInput,
    control = _useMerchiFormContext.control,
    getQuote = _useMerchiFormContext.getQuote,
    product = _useMerchiFormContext.product;
  var minimum = product.minimum,
    minimumPerGroup = product.minimumPerGroup;
  var validators = {
    positive: function positive(value) {
      return parseInt(value) > 0;
    },
    required: {
      value: true,
      message: 'Quantity is required'
    },
    valueAsNumber: true
  };
  if (minimum && minimumPerGroup) {
    validators.min = {
      value: minimum,
      message: "Group quantity can not be less than ".concat(minimum)
    };
  }
  var _useController = useController({
      name: name,
      control: control,
      rules: validators
    }),
    field = _useController.field;
  return /*#__PURE__*/_jsxs("div", {
    className: classNameInputContainer,
    children: [/*#__PURE__*/_jsxs("label", {
      children: ["Group (", count, ") quantity"]
    }), /*#__PURE__*/_jsx("input", _objectSpread(_objectSpread({
      disabled: disabled,
      min: "0",
      type: "number",
      className: classNameInput
    }, field), {}, {
      onChange: function onChange(e) {
        field.onChange(e);
        getQuote();
      }
    })), /*#__PURE__*/_jsx(VariationError, {
      name: name
    })]
  });
}
export default InputGroupQuantity;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfdHlwZW9mIiwibyIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiY29uc3RydWN0b3IiLCJwcm90b3R5cGUiLCJvd25LZXlzIiwiZSIsInIiLCJ0IiwiT2JqZWN0Iiwia2V5cyIsImdldE93blByb3BlcnR5U3ltYm9scyIsImZpbHRlciIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImVudW1lcmFibGUiLCJwdXNoIiwiYXBwbHkiLCJfb2JqZWN0U3ByZWFkIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiZm9yRWFjaCIsIl9kZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiZGVmaW5lUHJvcGVydHkiLCJvYmoiLCJrZXkiLCJ2YWx1ZSIsIl90b1Byb3BlcnR5S2V5IiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJpIiwiX3RvUHJpbWl0aXZlIiwiU3RyaW5nIiwidG9QcmltaXRpdmUiLCJjYWxsIiwiVHlwZUVycm9yIiwiTnVtYmVyIiwidXNlQ29udHJvbGxlciIsIlZhcmlhdGlvbkVycm9yIiwidXNlTWVyY2hpRm9ybUNvbnRleHQiLCJqc3hzIiwiX2pzeHMiLCJqc3giLCJfanN4IiwiSW5wdXRHcm91cFF1YW50aXR5IiwiX3JlZiIsImNvdW50IiwiZGlzYWJsZWQiLCJuYW1lIiwiX3VzZU1lcmNoaUZvcm1Db250ZXh0IiwiY2xhc3NOYW1lSW5wdXRDb250YWluZXIiLCJjbGFzc05hbWVJbnB1dCIsImNvbnRyb2wiLCJnZXRRdW90ZSIsInByb2R1Y3QiLCJtaW5pbXVtIiwibWluaW11bVBlckdyb3VwIiwidmFsaWRhdG9ycyIsInBvc2l0aXZlIiwicGFyc2VJbnQiLCJyZXF1aXJlZCIsIm1lc3NhZ2UiLCJ2YWx1ZUFzTnVtYmVyIiwibWluIiwiY29uY2F0IiwiX3VzZUNvbnRyb2xsZXIiLCJydWxlcyIsImZpZWxkIiwiY2xhc3NOYW1lIiwiY2hpbGRyZW4iLCJ0eXBlIiwib25DaGFuZ2UiXSwic291cmNlcyI6WyIuLi8uLi9zcmMvY29tcG9uZW50cy9JbnB1dEdyb3VwUXVhbnRpdHkudHN4Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2UgY2xpZW50JztcbmltcG9ydCB7IHVzZUNvbnRyb2xsZXIgfSBmcm9tICdyZWFjdC1ob29rLWZvcm0nO1xuaW1wb3J0IFZhcmlhdGlvbkVycm9yIGZyb20gJy4vVmFyaWF0aW9uRXJyb3InO1xuaW1wb3J0IHsgdXNlTWVyY2hpRm9ybUNvbnRleHQgfSBmcm9tICcuL01lcmNoaVByb2R1Y3RGb3JtUHJvdmlkZXInO1xuXG5pbnRlcmZhY2UgUHJvcHMge1xuICBjb3VudDogbnVtYmVyO1xuICBkaXNhYmxlZD86IGJvb2xlYW47XG4gIG5hbWU6IHN0cmluZztcbn1cblxuZnVuY3Rpb24gSW5wdXRHcm91cFF1YW50aXR5KHsgY291bnQsIGRpc2FibGVkLCBuYW1lIH06IFByb3BzKSB7XG4gIGNvbnN0IHtcbiAgICBjbGFzc05hbWVJbnB1dENvbnRhaW5lcixcbiAgICBjbGFzc05hbWVJbnB1dCxcbiAgICBjb250cm9sLFxuICAgIGdldFF1b3RlLFxuICAgIHByb2R1Y3QsXG4gIH0gPSB1c2VNZXJjaGlGb3JtQ29udGV4dCgpO1xuICBjb25zdCB7IG1pbmltdW0sIG1pbmltdW1QZXJHcm91cCB9ID0gcHJvZHVjdDtcbiAgY29uc3QgdmFsaWRhdG9yczogYW55ID0ge1xuICAgIHBvc2l0aXZlOiAodmFsdWU6IGFueSkgPT4gcGFyc2VJbnQodmFsdWUpID4gMCxcbiAgICByZXF1aXJlZDoge1xuICAgICAgdmFsdWU6IHRydWUsXG4gICAgICBtZXNzYWdlOiAnUXVhbnRpdHkgaXMgcmVxdWlyZWQnLFxuICAgIH0sXG4gICAgdmFsdWVBc051bWJlcjogdHJ1ZSxcbiAgfTtcbiAgaWYgKG1pbmltdW0gJiYgbWluaW11bVBlckdyb3VwKSB7XG4gICAgdmFsaWRhdG9ycy5taW4gPSB7XG4gICAgICB2YWx1ZTogbWluaW11bSxcbiAgICAgIG1lc3NhZ2U6IGBHcm91cCBxdWFudGl0eSBjYW4gbm90IGJlIGxlc3MgdGhhbiAke21pbmltdW19YCxcbiAgICB9O1xuICB9XG4gIGNvbnN0IHsgZmllbGQgfSA9IHVzZUNvbnRyb2xsZXIoe1xuICAgIG5hbWU6IG5hbWUsXG4gICAgY29udHJvbCxcbiAgICBydWxlczogdmFsaWRhdG9ycyxcbiAgfSk7XG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9e2NsYXNzTmFtZUlucHV0Q29udGFpbmVyfT5cbiAgICAgIDxsYWJlbD5Hcm91cCAoe2NvdW50fSkgcXVhbnRpdHk8L2xhYmVsPlxuICAgICAgPGlucHV0XG4gICAgICAgIGRpc2FibGVkPXtkaXNhYmxlZH1cbiAgICAgICAgbWluPScwJ1xuICAgICAgICB0eXBlPSdudW1iZXInXG4gICAgICAgIGNsYXNzTmFtZT17Y2xhc3NOYW1lSW5wdXR9XG4gICAgICAgIHsuLi5maWVsZH1cbiAgICAgICAgb25DaGFuZ2U9eyhlOiBhbnkpID0+IHtcbiAgICAgICAgICBmaWVsZC5vbkNoYW5nZShlKTtcbiAgICAgICAgICBnZXRRdW90ZSgpO1xuICAgICAgICB9fVxuICAgICAgLz5cbiAgICAgIDxWYXJpYXRpb25FcnJvciBuYW1lPXtuYW1lfSAvPlxuICAgIDwvZGl2PlxuICApO1xufVxuXG5leHBvcnQgZGVmYXVsdCBJbnB1dEdyb3VwUXVhbnRpdHk7XG4iXSwibWFwcGluZ3MiOiJBQUFBLFlBQVk7O0FBQUMsU0FBQUEsUUFBQUMsQ0FBQSxzQ0FBQUQsT0FBQSx3QkFBQUUsTUFBQSx1QkFBQUEsTUFBQSxDQUFBQyxRQUFBLGFBQUFGLENBQUEsa0JBQUFBLENBQUEsZ0JBQUFBLENBQUEsV0FBQUEsQ0FBQSx5QkFBQUMsTUFBQSxJQUFBRCxDQUFBLENBQUFHLFdBQUEsS0FBQUYsTUFBQSxJQUFBRCxDQUFBLEtBQUFDLE1BQUEsQ0FBQUcsU0FBQSxxQkFBQUosQ0FBQSxLQUFBRCxPQUFBLENBQUFDLENBQUE7QUFBQSxTQUFBSyxRQUFBQyxDQUFBLEVBQUFDLENBQUEsUUFBQUMsQ0FBQSxHQUFB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