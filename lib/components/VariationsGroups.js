import * as React from 'react';
import { isProductSupplierMOD } from './utils';
import { ButtonAddGroup, ButtonRemoveGroup } from './buttons';
import { LabelGroupCost } from './cost';
import GroupInventory from './GroupInventory';
import InputGroupQuantity from './InputGroupQuantity';
import InputHiddenStatic from './InputHiddenStatic';
import Variations from './Variations';
import { useFieldArray } from 'react-hook-form';
import { useMerchiFormContext } from './MerchiProductFormProvider';
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
import { Fragment as _Fragment } from "react/jsx-runtime";
function VariationsGroups(_ref) {
  var disabled = _ref.disabled,
    _ref$name = _ref.name,
    name = _ref$name === void 0 ? 'variationsGroups' : _ref$name;
  var _useMerchiFormContext = useMerchiFormContext(),
    classNameGroupsContainer = _useMerchiFormContext.classNameGroupsContainer,
    control = _useMerchiFormContext.control,
    hideQuantityField = _useMerchiFormContext.hideQuantityField,
    hideCalculatedPrice = _useMerchiFormContext.hideCalculatedPrice,
    job = _useMerchiFormContext.job,
    product = _useMerchiFormContext.product;
  var _useFieldArray = useFieldArray({
      control: control,
      keyName: 'groupId',
      name: name
    }),
    append = _useFieldArray.append,
    fields = _useFieldArray.fields,
    _remove = _useFieldArray.remove;
  var isResellMOD = isProductSupplierMOD(product);
  var groupCount = fields.length;
  return /*#__PURE__*/_jsx(_Fragment, {
    children: fields.map(function (group, index) {
      var count = index + 1;
      var variationGroup = job.variationsGroups[index];
      return /*#__PURE__*/_jsxs("fieldset", {
        className: classNameGroupsContainer,
        name: "".concat(name, "[").concat(index, "]"),
        children: [isResellMOD || hideQuantityField ? /*#__PURE__*/_jsx(InputHiddenStatic, {
          name: "".concat(name, "[").concat(index, "].quantity"),
          value: 1
        }) : /*#__PURE__*/_jsx(InputGroupQuantity, {
          count: count,
          disabled: disabled,
          name: "".concat(name, "[").concat(index, "].quantity")
        }), /*#__PURE__*/_jsx(Variations, {
          containerClass: "merchi-embed-form_product-group-variation-container",
          disabled: disabled,
          name: "".concat(name, "[").concat(index, "].variations"),
          keyName: "variationGroupsArrayFieldId"
        }), product.needsInventory && variationGroup && /*#__PURE__*/_jsx(GroupInventory, {
          group: job.variationsGroups[index]
        }), /*#__PURE__*/_jsxs("div", {
          className: "merchi-embed-form_product-group-actions-cost-container",
          children: [!hideCalculatedPrice && variationGroup && /*#__PURE__*/_jsx(LabelGroupCost, {
            group: variationGroup
          }), /*#__PURE__*/_jsx("div", {
            className: "merchi-embed-form_product-group-actions-container",
            children: groupCount > 1 && /*#__PURE__*/_jsx(ButtonRemoveGroup, {
              count: count,
              disabled: disabled,
              remove: function remove() {
                return _remove(index);
              }
            })
          })]
        }), groupCount === count && /*#__PURE__*/_jsx(ButtonAddGroup, {
          addGroup: append,
          disabled: disabled
        })]
      }, group.groupId);
    })
  });
}
export default VariationsGroups;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,