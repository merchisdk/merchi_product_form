'use client';

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
import { createContext, useContext, useState } from 'react';
import { useForm } from 'react-hook-form';
import { fetchJobQuote } from '../actions/jobs';
import { jsx as _jsx } from "react/jsx-runtime";
var MerchiProductFormContext = /*#__PURE__*/createContext({
  allowAddToCart: false,
  btnNameAddToCart: undefined,
  classNameAlertSellerEditable: undefined,
  classNameButtonSubmit: undefined,
  classNameButtonGroupAdd: undefined,
  classNameButtonGroupRemove: undefined,
  classNameButtonsSubmitContainer: undefined,
  classNameFileUploadContainer: undefined,
  classNameFileUpload: undefined,
  classNameFilePreviewContainer: undefined,
  classNameFileUploadTextContainer: undefined,
  classNameFilePreviewIconWrapper: undefined,
  classNameFileUploadButton: undefined,
  classNameFileUploadIcon: undefined,
  classNameFileUploadIconSecond: undefined,
  classNameFileUploadIconContainer: undefined,
  classNameFileListItem: undefined,
  classNameFileButtonDelete: undefined,
  classNameFileListItemContainer: undefined,
  classNameGroupsContainer: undefined,
  classNameGroupPriceContainer: undefined,
  classNameInput: undefined,
  classNameInputContainer: undefined,
  classNameInventoryStatus: undefined,
  classNameOptionContainer: undefined,
  classNameOptionInput: undefined,
  classNameOptionLabel: undefined,
  classNameOptionSuper: undefined,
  classNameOptionsCheckboxRadioContainer: undefined,
  classNameOptionImage: undefined,
  classNameOptionImageContainer: undefined,
  classNameOptionColour: undefined,
  classNameOptionColourContainer: undefined,
  classNameProductTitle: undefined,
  classNameProductOriginTitle: undefined,
  classNameProductTotalContainer: undefined,
  classNameProductTotal: undefined,
  classNameQuantityLabelContainer: undefined,
  classNameUnitPrice: undefined,
  control: {},
  currentUser: {},
  getQuote: function getQuote() {},
  hideCost: false,
  hideCalculatedPrice: false,
  hideQuantityField: false,
  hideRequestQuotationButton: false,
  hidePaymentUpfrontButton: false,
  hookForm: {},
  isCartItem: false,
  job: {},
  loading: false,
  onAddToCart: function onAddToCart() {},
  onBuyNow: function onBuyNow() {},
  onGetQuote: function onGetQuote() {},
  product: {},
  productFormId: undefined,
  setClient: function setClient() {},
  setJob: function setJob(job) {},
  setLoading: function setLoading(loading) {},
  showAlert: function showAlert(alert) {},
  showCurrency: false,
  showCurrencyCode: false,
  showUnitPrice: false
});
export var useMerchiFormContext = function useMerchiFormContext() {
  return useContext(MerchiProductFormContext);
};
export var MerchiProductFormProvider = function MerchiProductFormProvider(_ref) {
  var _ref$apiHost = _ref.apiHost,
    apiHost = _ref$apiHost === void 0 ? 'https://api.merchi.co/' : _ref$apiHost,
    _ref$version = _ref.version,
    version = _ref$version === void 0 ? 'v6' : _ref$version,
    allowAddToCart = _ref.allowAddToCart,
    btnNameAddToCart = _ref.btnNameAddToCart,
    _ref$classNameAlertSe = _ref.classNameAlertSellerEditable,
    classNameAlertSellerEditable = _ref$classNameAlertSe === void 0 ? 'alert alert-light' : _ref$classNameAlertSe,
    _ref$classNameButtonS = _ref.classNameButtonSubmit,
    classNameButtonSubmit = _ref$classNameButtonS === void 0 ? 'btn btn-primary w-100 merchi-embed-form_button-submit' : _ref$classNameButtonS,
    _ref$classNameButtonG = _ref.classNameButtonGroupAdd,
    classNameButtonGroupAdd = _ref$classNameButtonG === void 0 ? 'btn btn-white' : _ref$classNameButtonG,
    _ref$classNameButtonG2 = _ref.classNameButtonGroupRemove,
    classNameButtonGroupRemove = _ref$classNameButtonG2 === void 0 ? 'btn btn-danger' : _ref$classNameButtonG2,
    _ref$classNameButtons = _ref.classNameButtonsSubmitContainer,
    classNameButtonsSubmitContainer = _ref$classNameButtons === void 0 ? 'merchi-product-buttons-submit-container' : _ref$classNameButtons,
    _ref$classNameFileUpl = _ref.classNameFileUploadContainer,
    classNameFileUploadContainer = _ref$classNameFileUpl === void 0 ? 'merchi-input-file-container' : _ref$classNameFileUpl,
    _ref$classNameFileUpl2 = _ref.classNameFileUpload,
    classNameFileUpload = _ref$classNameFileUpl2 === void 0 ? 'merchi-embed-form_dropzone' : _ref$classNameFileUpl2,
    _ref$classNameFilePre = _ref.classNameFilePreviewContainer,
    classNameFilePreviewContainer = _ref$classNameFilePre === void 0 ? 'uploaded-variation-file' : _ref$classNameFilePre,
    _ref$classNameFileUpl3 = _ref.classNameFileUploadTextContainer,
    classNameFileUploadTextContainer = _ref$classNameFileUpl3 === void 0 ? 'merchi-embed-form_dropzone-text-container' : _ref$classNameFileUpl3,
    _ref$classNameFilePre2 = _ref.classNameFilePreviewIconWrapper,
    classNameFilePreviewIconWrapper = _ref$classNameFilePre2 === void 0 ? 'uploaded-variation-file-icon-wrapper' : _ref$classNameFilePre2,
    _ref$classNameFileUpl4 = _ref.classNameFileUploadButton,
    classNameFileUploadButton = _ref$classNameFileUpl4 === void 0 ? 'btn btn-sm btn-link ml-auto' : _ref$classNameFileUpl4,
    _ref$classNameFileUpl5 = _ref.classNameFileUploadIcon,
    classNameFileUploadIcon = _ref$classNameFileUpl5 === void 0 ? 'merchi-embed-form_dropzone-icon' : _ref$classNameFileUpl5,
    _ref$classNameFileUpl6 = _ref.classNameFileUploadIconSecond,
    classNameFileUploadIconSecond = _ref$classNameFileUpl6 === void 0 ? 'merchi-embed-form_dropzone-icon-plus' : _ref$classNameFileUpl6,
    _ref$classNameFileUpl7 = _ref.classNameFileUploadIconContainer,
    classNameFileUploadIconContainer = _ref$classNameFileUpl7 === void 0 ? 'merchi-embed-form_dropzone-icon-container' : _ref$classNameFileUpl7,
    _ref$classNameFileLis = _ref.classNameFileListItem,
    classNameFileListItem = _ref$classNameFileLis === void 0 ? 'list-group-item no-z-index-hover' : _ref$classNameFileLis,
    _ref$classNameFileBut = _ref.classNameFileButtonDownload,
    classNameFileButtonDownload = _ref$classNameFileBut === void 0 ? 'btn btn-sm btn-secondary' : _ref$classNameFileBut,
    _ref$classNameFileBut2 = _ref.classNameFileButtonDelete,
    classNameFileButtonDelete = _ref$classNameFileBut2 === void 0 ? 'btn btn-sm btn-danger ml-2' : _ref$classNameFileBut2,
    _ref$classNameFileLis2 = _ref.classNameFileListItemContainer,
    classNameFileListItemContainer = _ref$classNameFileLis2 === void 0 ? 'list-group' : _ref$classNameFileLis2,
    _ref$classNameGroupsC = _ref.classNameGroupsContainer,
    classNameGroupsContainer = _ref$classNameGroupsC === void 0 ? 'merchi-embed-form_product-group-container' : _ref$classNameGroupsC,
    _ref$classNameGroupPr = _ref.classNameGroupPriceContainer,
    classNameGroupPriceContainer = _ref$classNameGroupPr === void 0 ? 'merchi-embed-form_product-group-total-cost' : _ref$classNameGroupPr,
    _ref$classNameInput = _ref.classNameInput,
    classNameInput = _ref$classNameInput === void 0 ? 'form-control' : _ref$classNameInput,
    _ref$classNameInvento = _ref.classNameInventoryStatus,
    classNameInventoryStatus = _ref$classNameInvento === void 0 ? 'flex-fill' : _ref$classNameInvento,
    _ref$classNameInputCo = _ref.classNameInputContainer,
    classNameInputContainer = _ref$classNameInputCo === void 0 ? 'merchi-embed-form_product-group-input-qty-container' : _ref$classNameInputCo,
    _ref$classNameOptionC = _ref.classNameOptionContainer,
    classNameOptionContainer = _ref$classNameOptionC === void 0 ? 'merchi-embed-form_checkbox_radio-item' : _ref$classNameOptionC,
    _ref$classNameOptionI = _ref.classNameOptionInput,
    classNameOptionInput = _ref$classNameOptionI === void 0 ? 'merchi-embed-form_checkbox_radio-input' : _ref$classNameOptionI,
    _ref$classNameOptionL = _ref.classNameOptionLabel,
    classNameOptionLabel = _ref$classNameOptionL === void 0 ? 'merchi-embed-form_checkbox_radio-label' : _ref$classNameOptionL,
    _ref$classNameOptionS = _ref.classNameOptionSuper,
    classNameOptionSuper = _ref$classNameOptionS === void 0 ? 'merchi-embed-form_checkbox_radio-super' : _ref$classNameOptionS,
    _ref$classNameOptions = _ref.classNameOptionsCheckboxRadioContainer,
    classNameOptionsCheckboxRadioContainer = _ref$classNameOptions === void 0 ? '' : _ref$classNameOptions,
    _ref$classNameOptionI2 = _ref.classNameOptionImage,
    classNameOptionImage = _ref$classNameOptionI2 === void 0 ? 'merchi-embed-form_image-select-option-item-img' : _ref$classNameOptionI2,
    _ref$classNameOptionI3 = _ref.classNameOptionImageContainer,
    classNameOptionImageContainer = _ref$classNameOptionI3 === void 0 ? 'merchi-embed-form_image-select-option-item-container' : _ref$classNameOptionI3,
    _ref$classNameOptionC2 = _ref.classNameOptionColour,
    classNameOptionColour = _ref$classNameOptionC2 === void 0 ? 'merchi-embed-form_color-select' : _ref$classNameOptionC2,
    _ref$classNameOptionC3 = _ref.classNameOptionColourContainer,
    classNameOptionColourContainer = _ref$classNameOptionC3 === void 0 ? 'merchi-embed-form_color-select-item' : _ref$classNameOptionC3,
    _ref$classNameProduct = _ref.classNameProductTitle,
    classNameProductTitle = _ref$classNameProduct === void 0 ? 'merchi-product-title' : _ref$classNameProduct,
    _ref$classNameProduct2 = _ref.classNameProductOriginTitle,
    classNameProductOriginTitle = _ref$classNameProduct2 === void 0 ? 'merchi-product-origin-title' : _ref$classNameProduct2,
    _ref$classNameProduct3 = _ref.classNameProductTotal,
    classNameProductTotal = _ref$classNameProduct3 === void 0 ? 'merchi-embed-form_summary-product-cost' : _ref$classNameProduct3,
    _ref$classNameProduct4 = _ref.classNameProductTotalContainer,
    classNameProductTotalContainer = _ref$classNameProduct4 === void 0 ? 'merchi-embed-form_summary-product-cost-container' : _ref$classNameProduct4,
    _ref$classNameQuantit = _ref.classNameQuantityLabelContainer,
    classNameQuantityLabelContainer = _ref$classNameQuantit === void 0 ? 'merchi-embed-form_quantity-label-container' : _ref$classNameQuantit,
    classNameUnitPrice = _ref.classNameUnitPrice,
    children = _ref.children,
    currentUser = _ref.currentUser,
    hideCost = _ref.hideCost,
    hideCalculatedPrice = _ref.hideCalculatedPrice,
    hideQuantityField = _ref.hideQuantityField,
    hideRequestQuotationButton = _ref.hideRequestQuotationButton,
    hidePaymentUpfrontButton = _ref.hidePaymentUpfrontButton,
    isCartItem = _ref.isCartItem,
    initProduct = _ref.initProduct,
    onAddToCart = _ref.onAddToCart,
    onBuyNow = _ref.onBuyNow,
    onGetQuote = _ref.onGetQuote,
    productFormId = _ref.productFormId,
    showCurrency = _ref.showCurrency,
    showCurrencyCode = _ref.showCurrencyCode,
    showUnitPrice = _ref.showUnitPrice;
  var hookForm = useForm({
    defaultValues: initProduct.defaultJob || {}
  });
  var _useState = useState(currentUser),
    _useState2 = _slicedToArray(_useState, 2),
    client = _useState2[0],
    setClient = _useState2[1];
  var _useState3 = useState(initProduct.defaultJob || {}),
    _useState4 = _slicedToArray(_useState3, 2),
    job = _useState4[0],
    setJob = _useState4[1];
  var _useState5 = useState(false),
    _useState6 = _slicedToArray(_useState5, 2),
    loading = _useState6[0],
    setLoading = _useState6[1];
  var control = hookForm.control,
    getValues = hookForm.getValues;
  function getQuote() {
    return _getQuote.apply(this, arguments);
  }
  function _getQuote() {
    _getQuote = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {
      var values, r;
      return _regeneratorRuntime().wrap(function _callee4$(_context4) {
        while (1) switch (_context4.prev = _context4.next) {
          case 0:
            setLoading(true);
            _context4.next = 3;
            return getValues();
          case 3:
            values = _context4.sent;
            _context4.next = 6;
            return fetchJobQuote(_objectSpread(_objectSpread({}, values), {}, {
              product: {
                id: initProduct.id
              }
            }), "".concat(apiHost).concat(version));
          case 6:
            r = _context4.sent;
            setJob(r);
            setLoading(false);
          case 9:
          case "end":
            return _context4.stop();
        }
      }, _callee4);
    }));
    return _getQuote.apply(this, arguments);
  }
  var addToCart = onAddToCart ? ( /*#__PURE__*/function () {
    var _addToCart = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
      return _regeneratorRuntime().wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return getQuote();
          case 2:
            onAddToCart(job);
          case 3:
          case "end":
            return _context.stop();
        }
      }, _callee);
    }));
    function addToCart() {
      return _addToCart.apply(this, arguments);
    }
    return addToCart;
  }()) : undefined;
  var buyNow = onBuyNow ? ( /*#__PURE__*/function () {
    var _addToCart2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
      return _regeneratorRuntime().wrap(function _callee2$(_context2) {
        while (1) switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return getQuote();
          case 2:
            onBuyNow(job);
          case 3:
          case "end":
            return _context2.stop();
        }
      }, _callee2);
    }));
    function addToCart() {
      return _addToCart2.apply(this, arguments);
    }
    return addToCart;
  }()) : undefined;
  var getSubmitQuote = onGetQuote ? ( /*#__PURE__*/function () {
    var _addToCart3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {
      return _regeneratorRuntime().wrap(function _callee3$(_context3) {
        while (1) switch (_context3.prev = _context3.next) {
          case 0:
            _context3.next = 2;
            return getQuote();
          case 2:
            onGetQuote(job);
          case 3:
          case "end":
            return _context3.stop();
        }
      }, _callee3);
    }));
    function addToCart() {
      return _addToCart3.apply(this, arguments);
    }
    return addToCart;
  }()) : undefined;
  var _useState7 = useState(null),
    _useState8 = _slicedToArray(_useState7, 2),
    alert = _useState8[0],
    showAlert = _useState8[1];
  return /*#__PURE__*/_jsx(MerchiProductFormContext.Provider, {
    value: {
      allowAddToCart: allowAddToCart,
      btnNameAddToCart: btnNameAddToCart,
      classNameAlertSellerEditable: classNameAlertSellerEditable,
      classNameButtonSubmit: classNameButtonSubmit,
      classNameButtonGroupAdd: classNameButtonGroupAdd,
      classNameButtonGroupRemove: classNameButtonGroupRemove,
      classNameButtonsSubmitContainer: classNameButtonsSubmitContainer,
      classNameFileUploadContainer: classNameFileUploadContainer,
      classNameFileUpload: classNameFileUpload,
      classNameFilePreviewContainer: classNameFilePreviewContainer,
      classNameFileUploadTextContainer: classNameFileUploadTextContainer,
      classNameFilePreviewIconWrapper: classNameFilePreviewIconWrapper,
      classNameFileUploadButton: classNameFileUploadButton,
      classNameFileUploadIcon: classNameFileUploadIcon,
      classNameFileUploadIconSecond: classNameFileUploadIconSecond,
      classNameFileUploadIconContainer: classNameFileUploadIconContainer,
      classNameFileListItem: classNameFileListItem,
      classNameFileButtonDownload: classNameFileButtonDownload,
      classNameFileButtonDelete: classNameFileButtonDelete,
      classNameFileListItemContainer: classNameFileListItemContainer,
      classNameGroupsContainer: classNameGroupsContainer,
      classNameGroupPriceContainer: classNameGroupPriceContainer,
      classNameInput: classNameInput,
      classNameInputContainer: classNameInputContainer,
      classNameInventoryStatus: classNameInventoryStatus,
      classNameOptionContainer: classNameOptionContainer,
      classNameOptionInput: classNameOptionInput,
      classNameOptionLabel: classNameOptionLabel,
      classNameOptionSuper: classNameOptionSuper,
      classNameOptionsCheckboxRadioContainer: classNameOptionsCheckboxRadioContainer,
      classNameOptionImage: classNameOptionImage,
      classNameOptionImageContainer: classNameOptionImageContainer,
      classNameOptionColour: classNameOptionColour,
      classNameOptionColourContainer: classNameOptionColourContainer,
      classNameProductTitle: classNameProductTitle,
      classNameProductOriginTitle: classNameProductOriginTitle,
      classNameProductTotalContainer: classNameProductTotalContainer,
      classNameProductTotal: classNameProductTotal,
      classNameQuantityLabelContainer: classNameQuantityLabelContainer,
      classNameUnitPrice: classNameUnitPrice,
      client: client,
      control: control,
      getQuote: getQuote,
      hideCost: hideCost,
      hideCalculatedPrice: hideCalculatedPrice,
      hideQuantityField: hideQuantityField,
      hideRequestQuotationButton: hideRequestQuotationButton,
      hidePaymentUpfrontButton: hidePaymentUpfrontButton,
      hookForm: hookForm,
      isCartItem: isCartItem,
      job: job,
      loading: loading,
      onAddToCart: addToCart,
      onBuyNow: buyNow,
      onGetQuote: getSubmitQuote,
      product: initProduct,
      productFormId: productFormId,
      setClient: setClient,
      setJob: setJob,
      setLoading: setLoading,
      showAlert: showAlert,
      showCurrency: showCurrency,
      showCurrencyCode: showCurrencyCode,
      showUnitPrice: showUnitPrice
    },
    children: children
  });
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,