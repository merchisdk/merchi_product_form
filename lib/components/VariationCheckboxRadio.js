'use client';

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
import VariationCheckBoxOrRadioOption from './VariationCheckBoxOrRadioOption';
import VariationError from './VariationError';
import VariationLabel from './VariationLabel';
import { useMerchiFormContext } from './MerchiProductFormProvider';
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
export var VariationCheckboxRadio = function VariationCheckboxRadio(_ref) {
  var disabled = _ref.disabled,
    inputType = _ref.inputType,
    name = _ref.name,
    variation = _ref.variation;
  var _useMerchiFormContext = useMerchiFormContext(),
    classNameOptionsCheckboxRadioContainer = _useMerchiFormContext.classNameOptionsCheckboxRadioContainer;
  var _variation$selectable = variation.selectableOptions,
    selectableOptions = _variation$selectable === void 0 ? [] : _variation$selectable,
    variationField = variation.variationField;
  var _variationField$optio = variationField.options,
    options = _variationField$optio === void 0 ? [] : _variationField$optio;
  var optionAvailable = function optionAvailable(index) {
    return selectableOptions[index] ? selectableOptions[index].available : true;
  };
  return /*#__PURE__*/_jsxs("div", {
    className: "".concat(classNameOptionsCheckboxRadioContainer, " merchi-embed-form_checkbox_radio-container"),
    children: [/*#__PURE__*/_jsx(VariationLabel, {
      forceHideCost: true,
      variationClassName: "merchi-embed-form_input-".concat(inputType === 'checkbox' ? 'checkbox' : 'radio'),
      name: name,
      variation: variation
    }), /*#__PURE__*/_jsx("div", {
      className: "merchi-embed-form_checkbox_radio-item-container",
      children: options.map(function (option, index) {
        return /*#__PURE__*/_jsx(VariationCheckBoxOrRadioOption, {
          disabled: disabled,
          index: index,
          inputType: inputType,
          isAvailable: optionAvailable(index),
          name: name,
          option: option,
          variation: variation
        }, "variation-option-".concat(name, "-").concat(index));
      })
    }), /*#__PURE__*/_jsx(VariationError, {
      name: name
    })]
  });
};
export var VariationCheckbox = function VariationCheckbox(props) {
  return /*#__PURE__*/_jsx(VariationCheckboxRadio, _objectSpread(_objectSpread({}, props), {}, {
    inputType: "checkbox"
  }));
};
export var VariationRadio = function VariationRadio(props) {
  return /*#__PURE__*/_jsx(VariationCheckboxRadio, _objectSpread(_objectSpread({}, props), {}, {
    inputType: "radio"
  }));
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,