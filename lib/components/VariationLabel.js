import * as React from 'react';
import { variationCostDetail } from './utils';
import VariationFieldNameAndCostInputs from './VariationFieldNameAndCostInputs';
import { useMerchiFormContext } from './MerchiProductFormProvider';
import { CgSpinner } from 'react-icons/cg';
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
function VariationLabel(_ref) {
  var forceHideCost = _ref.forceHideCost,
    name = _ref.name,
    _ref$variation = _ref.variation,
    variation = _ref$variation === void 0 ? {} : _ref$variation,
    variationClassName = _ref.variationClassName;
  var cost = variation.cost,
    variationField = variation.variationField,
    onceOffCost = variation.onceOffCost,
    unitCost = variation.unitCost;
  var sellerProductEditable = variationField.sellerProductEditable;
  var _useMerchiFormContext = useMerchiFormContext(),
    hideCost = _useMerchiFormContext.hideCost,
    loading = _useMerchiFormContext.loading;
  var hasExtraCost = onceOffCost || unitCost;
  return /*#__PURE__*/_jsxs("div", {
    className: "d-flex align-items-center mb-1 ".concat(variationClassName || ''),
    children: [/*#__PURE__*/_jsxs("div", {
      className: "align-items-center flex-wrap gap-1".concat(variationClassName ? variationClassName + '-title' : ''),
      children: ["".concat(variationField.name, " "), loading && cost ? /*#__PURE__*/_jsx(CgSpinner, {
        fontSize: "1.25rem",
        className: "animate_spin ml-1"
      }) : hideCost || forceHideCost ? '' : hasExtraCost && !sellerProductEditable ? /*#__PURE__*/_jsx("span", {
        className: "merchi-embed-form_variation-cost-detail",
        children: variationCostDetail(variation)
      }) : '']
    }), /*#__PURE__*/_jsx(VariationFieldNameAndCostInputs, {
      name: name,
      variation: variation
    })]
  });
}
export default VariationLabel;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsInZhcmlhdGlvbkNvc3REZXRhaWwiLCJWYXJpYXRpb25GaWVsZE5hbWVBbmRDb3N0SW5wdXRzIiwidXNlTWVyY2hpRm9ybUNvbnRleHQiLCJDZ1NwaW5uZXIiLCJqc3giLCJfanN4IiwianN4cyIsIl9qc3hzIiwiVmFyaWF0aW9uTGFiZWwiLCJfcmVmIiwiZm9yY2VIaWRlQ29zdCIsIm5hbWUiLCJfcmVmJHZhcmlhdGlvbiIsInZhcmlhdGlvbiIsInZhcmlhdGlvbkNsYXNzTmFtZSIsImNvc3QiLCJ2YXJpYXRpb25GaWVsZCIsIm9uY2VPZmZDb3N0IiwidW5pdENvc3QiLCJzZWxsZXJQcm9kdWN0RWRpdGFibGUiLCJfdXNlTWVyY2hpRm9ybUNvbnRleHQiLCJoaWRlQ29zdCIsImxvYWRpbmciLCJoYXNFeHRyYUNvc3QiLCJjbGFzc05hbWUiLCJjb25jYXQiLCJjaGlsZHJlbiIsImZvbnRTaXplIl0sInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NvbXBvbmVudHMvVmFyaWF0aW9uTGFiZWwudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHZhcmlhdGlvbkNvc3REZXRhaWwgfSBmcm9tICcuL3V0aWxzJztcbmltcG9ydCBWYXJpYXRpb25GaWVsZE5hbWVBbmRDb3N0SW5wdXRzIGZyb20gJy4vVmFyaWF0aW9uRmllbGROYW1lQW5kQ29zdElucHV0cyc7XG5pbXBvcnQgeyB1c2VNZXJjaGlGb3JtQ29udGV4dCB9IGZyb20gJy4vTWVyY2hpUHJvZHVjdEZvcm1Qcm92aWRlcic7XG5pbXBvcnQgeyBDZ1NwaW5uZXIgfSBmcm9tICdyZWFjdC1pY29ucy9jZyc7XG5cbmludGVyZmFjZSBQcm9wcyB7XG4gIGZvcmNlSGlkZUNvc3Q/OiBib29sZWFuO1xuICBuYW1lOiBzdHJpbmc7XG4gIHZhcmlhdGlvbjogYW55O1xuICB2YXJpYXRpb25DbGFzc05hbWU/OiBzdHJpbmc7XG59XG5cbmZ1bmN0aW9uIFZhcmlhdGlvbkxhYmVsKHtcbiAgZm9yY2VIaWRlQ29zdCxcbiAgbmFtZSxcbiAgdmFyaWF0aW9uID0ge30sXG4gIHZhcmlhdGlvbkNsYXNzTmFtZSxcbn06IFByb3BzKSB7XG4gIGNvbnN0IHsgY29zdCwgdmFyaWF0aW9uRmllbGQsIG9uY2VPZmZDb3N0LCB1bml0Q29zdCB9ID0gdmFyaWF0aW9uO1xuICBjb25zdCB7IHNlbGxlclByb2R1Y3RFZGl0YWJsZSB9ID0gdmFyaWF0aW9uRmllbGQ7XG4gIGNvbnN0IHsgaGlkZUNvc3QsIGxvYWRpbmcgfSA9IHVzZU1lcmNoaUZvcm1Db250ZXh0KCk7XG4gIGNvbnN0IGhhc0V4dHJhQ29zdCA9IG9uY2VPZmZDb3N0IHx8IHVuaXRDb3N0O1xuICByZXR1cm4gKFxuICAgIDxkaXZcbiAgICAgIGNsYXNzTmFtZT17YGQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXIgbWItMSAke3ZhcmlhdGlvbkNsYXNzTmFtZSB8fCAnJ31gfVxuICAgID5cbiAgICAgIDxkaXZcbiAgICAgICAgY2xhc3NOYW1lPXtgYWxpZ24taXRlbXMtY2VudGVyIGZsZXgtd3JhcCBnYXAtMSR7XG4gICAgICAgICAgdmFyaWF0aW9uQ2xhc3NOYW1lID8gdmFyaWF0aW9uQ2xhc3NOYW1lICsgJy10aXRsZScgOiAnJ1xuICAgICAgICB9YH1cbiAgICAgID5cbiAgICAgICAge2Ake3ZhcmlhdGlvbkZpZWxkIS5uYW1lfSBgfVxuICAgICAgICB7bG9hZGluZyAmJiBjb3N0ID8gKFxuICAgICAgICAgIDxDZ1NwaW5uZXIgZm9udFNpemU9JzEuMjVyZW0nIGNsYXNzTmFtZT0nYW5pbWF0ZV9zcGluIG1sLTEnIC8+XG4gICAgICAgICkgOiBoaWRlQ29zdCB8fCBmb3JjZUhpZGVDb3N0ID8gKFxuICAgICAgICAgICcnXG4gICAgICAgICkgOiBoYXNFeHRyYUNvc3QgJiYgIXNlbGxlclByb2R1Y3RFZGl0YWJsZSA/IChcbiAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9J21lcmNoaS1lbWJlZC1mb3JtX3ZhcmlhdGlvbi1jb3N0LWRldGFpbCc+XG4gICAgICAgICAgICB7dmFyaWF0aW9uQ29zdERldGFpbCh2YXJpYXRpb24pfVxuICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgKSA6IChcbiAgICAgICAgICAnJ1xuICAgICAgICApfVxuICAgICAgPC9kaXY+XG4gICAgICA8VmFyaWF0aW9uRmllbGROYW1lQW5kQ29zdElucHV0cyBuYW1lPXtuYW1lfSB2YXJpYXRpb249e3ZhcmlhdGlvbn0gLz5cbiAgICA8L2Rpdj5cbiAgKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgVmFyaWF0aW9uTGFiZWw7XG4iXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sS0FBS0EsS0FBSyxNQUFNLE9BQU87QUFDOUIsU0FBU0MsbUJBQW1CLFFBQVEsU0FBUztBQUM3QyxPQUFPQywrQkFBK0IsTUFBTSxtQ0FBbUM7QUFDL0UsU0FBU0Msb0JBQW9CLFFBQVEsNkJBQTZCO0FBQ2xFLFNBQVNDLFNBQVMsUUFBUSxnQkFBZ0I7QUFBQyxTQUFBQyxHQUFBLElBQUFDLElBQUE7QUFBQSxTQUFBQyxJQUFBLElBQUFDLEtBQUE7QUFTM0MsU0FBU0MsY0FBY0EsQ0FBQUMsSUFBQSxFQUtiO0VBQUEsSUFKUkMsYUFBYSxHQUFBRCxJQUFBLENBQWJDLGFBQWE7SUFDYkMsSUFBSSxHQUFBRixJQUFBLENBQUpFLElBQUk7SUFBQUMsY0FBQSxHQUFBSCxJQUFBLENBQ0pJLFNBQVM7SUFBVEEsU0FBUyxHQUFBRCxjQUFBLGNBQUcsQ0FBQyxDQUFDLEdBQUFBLGNBQUE7SUFDZEUsa0JBQWtCLEdBQUFMLElBQUEsQ0FBbEJLLGtCQUFrQjtFQUVsQixJQUFRQyxJQUFJLEdBQTRDRixTQUFTLENBQXpERSxJQUFJO0lBQUVDLGNBQWMsR0FBNEJILFNBQVMsQ0FBbkRHLGNBQWM7SUFBRUMsV0FBVyxHQUFlSixTQUFTLENBQW5DSSxXQUFXO0lBQUVDLFFBQVEsR0FBS0wsU0FBUyxDQUF0QkssUUFBUTtFQUNuRCxJQUFRQyxxQkFBcUIsR0FBS0gsY0FBYyxDQUF4Q0cscUJBQXFCO0VBQzdCLElBQUFDLHFCQUFBLEdBQThCbEIsb0JBQW9CLENBQUMsQ0FBQztJQUE1Q21CLFFBQVEsR0FBQUQscUJBQUEsQ0FBUkMsUUFBUTtJQUFFQyxPQUFPLEdBQUFGLHFCQUFBLENBQVBFLE9BQU87RUFDekIsSUFBTUMsWUFBWSxHQUFHTixXQUFXLElBQUlDLFFBQVE7RUFDNUMsb0JBQ0VYLEtBQUE7SUFDRWlCLFNBQVMsb0NBQUFDLE1BQUEsQ0FBb0NYLGtCQUFrQixJQUFJLEVBQUUsQ0FBRztJQUFBWSxRQUFBLGdCQUV4RW5CLEtBQUE7TUFDRWlCLFNBQVMsdUNBQUFDLE1BQUEsQ0FDUFgsa0JBQWtCLEdBQUdBLGtCQUFrQixHQUFHLFFBQVEsR0FBRyxFQUFFLENBQ3REO01BQUFZLFFBQUEsTUFBQUQsTUFBQSxDQUVDVCxjQUFjLENBQUVMLElBQUksUUFDdkJXLE9BQU8sSUFBSVAsSUFBSSxnQkFDZFYsSUFBQSxDQUFDRixTQUFTO1FBQUN3QixRQUFRLEVBQUMsU0FBUztRQUFDSCxTQUFTLEVBQUM7TUFBbUIsQ0FBRSxDQUFDLEdBQzVESCxRQUFRLElBQUlYLGFBQWEsR0FDM0IsRUFBRSxHQUNBYSxZQUFZLElBQUksQ0FBQ0oscUJBQXFCLGdCQUN4Q2QsSUFBQTtRQUFNbUIsU0FBUyxFQUFDLHlDQUF5QztRQUFBRSxRQUFBLEVBQ3REMUIsbUJBQW1CLENBQUNhLFNBQVM7TUFBQyxDQUMzQixDQUFDLEdBRVAsRUFDRDtJQUFBLENBQ0UsQ0FBQyxlQUNOUixJQUFBLENBQUNKLCtCQUErQjtNQUFDVSxJQUFJLEVBQUVBLElBQUs7TUFBQ0UsU0FBUyxFQUFFQTtJQUFVLENBQUUsQ0FBQztFQUFBLENBQ2xFLENBQUM7QUFFVjtBQUVBLGVBQWVMLGNBQWMifQ==