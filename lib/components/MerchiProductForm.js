'use client';

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
import { MerchiProductFormProvider } from './MerchiProductFormProvider';
import InputProductQuantity from './InputProductQuantity';
import ProductTotalCost from './ProductTotalCost';
import ProductButtonsSubmit from './ProductButtonsSubmit';
import ProductTitle from './ProductTitle';
import Variations from './Variations';
import VariationsGroups from './VariationsGroups';
import { isProductFileDownload, isProductSupplierMOD } from './utils';
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
function MerchiProductForm(props) {
  var _props$hideQuantityFi = props.hideQuantityField,
    hideQuantityField = _props$hideQuantityFi === void 0 ? false : _props$hideQuantityFi,
    _props$hideSubmitButt = props.hideSubmitButtons,
    hideSubmitButtons = _props$hideSubmitButt === void 0 ? false : _props$hideSubmitButt,
    _props$hideTitle = props.hideTitle,
    hideTitle = _props$hideTitle === void 0 ? false : _props$hideTitle,
    initProduct = props.initProduct;
  var groupVariationFields = initProduct.groupVariationFields;
  var hasGroups = groupVariationFields && groupVariationFields.length;
  var isSupplierMOD = isProductSupplierMOD(initProduct);
  var isDownloadableProduct = isProductFileDownload(initProduct);
  console.log(' Merchi form working ');
  return /*#__PURE__*/_jsxs(MerchiProductFormProvider, _objectSpread(_objectSpread({}, props), {}, {
    children: [!hideTitle && /*#__PURE__*/_jsx(ProductTitle, {}), !!(!isDownloadableProduct && !isSupplierMOD && !hasGroups && !hideQuantityField) && /*#__PURE__*/_jsx(InputProductQuantity, {}), /*#__PURE__*/_jsxs("div", {
      className: "merchi-embed-form_variantion-container",
      children: [/*#__PURE__*/_jsx(VariationsGroups, {}), /*#__PURE__*/_jsx(Variations, {})]
    }), /*#__PURE__*/_jsx(ProductTotalCost, {}), !hideSubmitButtons && /*#__PURE__*/_jsx(ProductButtonsSubmit, {})]
  }));
}
export default MerchiProductForm;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,