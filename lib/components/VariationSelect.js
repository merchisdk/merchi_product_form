'use client';

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
import { useController } from 'react-hook-form';
import VariationError from './VariationError';
import VariationLabel from './VariationLabel';
import VariationFieldOptionDefaultInputs from './VariationFieldOptionDefaultInputs';
import { variationCostDetail } from './utils';
import { useMerchiFormContext } from './MerchiProductFormProvider';
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
var VariationSelect = function VariationSelect(_ref) {
  var disabled = _ref.disabled,
    name = _ref.name,
    variation = _ref.variation;
  var _useMerchiFormContext = useMerchiFormContext(),
    classNameInputContainer = _useMerchiFormContext.classNameInputContainer,
    classNameInput = _useMerchiFormContext.classNameInput,
    control = _useMerchiFormContext.control,
    hideCost = _useMerchiFormContext.hideCost,
    getQuote = _useMerchiFormContext.getQuote;
  var _useController = useController({
      name: "".concat(name, ".value"),
      control: control
    }),
    field = _useController.field,
    _useController$fieldS = _useController.fieldState,
    invalid = _useController$fieldS.invalid,
    error = _useController$fieldS.error;
  var _variation$selectable = variation.selectableOptions,
    selectableOptions = _variation$selectable === void 0 ? [] : _variation$selectable,
    variationField = variation.variationField;
  var _variationField$optio = variationField.options,
    options = _variationField$optio === void 0 ? [] : _variationField$optio;
  var optionAvailable = function optionAvailable(index) {
    return selectableOptions[index] ? selectableOptions[index].available : true;
  };
  var validationClass = invalid ? 'is-invalid' : '';
  return /*#__PURE__*/_jsxs("div", {
    className: "".concat(classNameInputContainer, " merchi-input-select-container"),
    children: [/*#__PURE__*/_jsx(VariationLabel, {
      variationClassName: "merchi-embed-form_input-select",
      name: name,
      variation: variation
    }), options.map(function (option, index) {
      return /*#__PURE__*/_jsx("span", {
        children: /*#__PURE__*/_jsx(VariationFieldOptionDefaultInputs, {
          option: option,
          optionName: "".concat(name, ".variationField.options[").concat(index, "]")
        })
      }, "".concat(name, "-select-option-values-").concat(index));
    }), /*#__PURE__*/_jsx("select", _objectSpread(_objectSpread({}, field), {}, {
      disabled: disabled,
      className: "".concat(classNameInput, " ").concat(validationClass),
      onChange: function onChange(e) {
        field.onChange(e); // Ensure the original onChange is called
        getQuote();
      },
      children: options.map(function (option, index) {
        return /*#__PURE__*/_jsxs("option", {
          value: option.id,
          disabled: !optionAvailable(index),
          children: [option.value, !optionAvailable(index) ? ' - insufficient stock' : '', !hideCost && selectableOptions[index] && variationCostDetail(selectableOptions[index])]
        }, "variation-option-".concat(option.id));
      })
    })), /*#__PURE__*/_jsx(VariationError, {
      name: name
    })]
  });
};
export default VariationSelect;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,