'use client';

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
import { useController } from 'react-hook-form';
import VariationFieldOptionDefaultInputs from './VariationFieldOptionDefaultInputs';
import { variationFieldOptionCostDetail } from './utils';
import { useMerchiFormContext } from './MerchiProductFormProvider';
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
function VariationCheckBoxOrRadioOption(_ref) {
  var disabled = _ref.disabled,
    index = _ref.index,
    inputType = _ref.inputType,
    _ref$isAvailable = _ref.isAvailable,
    isAvailable = _ref$isAvailable === void 0 ? true : _ref$isAvailable,
    name = _ref.name,
    option = _ref.option,
    variation = _ref.variation;
  var _useMerchiFormContext = useMerchiFormContext(),
    classNameOptionContainer = _useMerchiFormContext.classNameOptionContainer,
    classNameOptionInput = _useMerchiFormContext.classNameOptionInput,
    classNameOptionLabel = _useMerchiFormContext.classNameOptionLabel,
    classNameOptionSuper = _useMerchiFormContext.classNameOptionSuper,
    getQuote = _useMerchiFormContext.getQuote,
    control = _useMerchiFormContext.control;
  var _useController = useController({
      name: "".concat(name, ".value"),
      control: control
    }),
    field = _useController.field;
  var variationField = variation.variationField;
  var sellerProductEditable = variationField.sellerProductEditable;
  var id = option.id,
    value = option.value;
  var optionCost = variationFieldOptionCostDetail(option);
  var outOfStock = !isAvailable ? ' - insufficient stock' : '';
  var outOfStockOrCost = outOfStock || optionCost;
  var activeIds = (field.value || '').split(',');
  var isActive = activeIds.includes(String(id));
  var handleChange = function handleChange(e) {
    var updatedIds = _toConsumableArray(activeIds);
    if (sellerProductEditable || inputType === 'checkbox') {
      // Checkbox Logic
      if (e.target.checked && !updatedIds.includes(String(id))) {
        updatedIds.push(String(id));
      } else if (!e.target.checked) {
        updatedIds = updatedIds.filter(function (existingId) {
          return existingId !== String(id);
        });
      }
    } else if (inputType === 'radio') {
      // Radio Logic
      updatedIds = [String(id)];
    }
    field.onChange(updatedIds.join(','));
    getQuote();
  };
  return /*#__PURE__*/_jsxs("div", {
    className: classNameOptionContainer,
    children: [/*#__PURE__*/_jsx(VariationFieldOptionDefaultInputs, {
      option: option,
      optionName: "".concat(name, ".variationField.options[").concat(index, "]")
    }), /*#__PURE__*/_jsx("input", {
      className: classNameOptionInput,
      checked: isActive,
      type: sellerProductEditable ? 'checkbox' : inputType,
      disabled: disabled || !isAvailable,
      value: id,
      name: "".concat(name, ".value"),
      onChange: handleChange
    }), /*#__PURE__*/_jsx("label", {
      className: classNameOptionLabel,
      children: value
    }), outOfStockOrCost && /*#__PURE__*/_jsxs("span", {
      className: classNameOptionSuper,
      children: [outOfStock, " ", optionCost]
    })]
  });
}
export default VariationCheckBoxOrRadioOption;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,