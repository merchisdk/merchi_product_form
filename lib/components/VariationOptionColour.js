'use client';

import TooltipElement from './TooltipElement';
import { variationFieldOptionCostDetail } from './utils';
import VariationFieldOptionDefaultInputs from './VariationFieldOptionDefaultInputs';
import IconCheckedOrNoStock from './icons/IconCheckedOrNoStock';
import { useMerchiFormContext } from './MerchiProductFormProvider';
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
function VariationOptionColour(_ref) {
  var doClick = _ref.doClick,
    _ref$isAvailable = _ref.isAvailable,
    isAvailable = _ref$isAvailable === void 0 ? true : _ref$isAvailable,
    isChecked = _ref.isChecked,
    name = _ref.name,
    option = _ref.option,
    sellerProductEditable = _ref.sellerProductEditable;
  var _useMerchiFormContext = useMerchiFormContext(),
    classNameOptionColour = _useMerchiFormContext.classNameOptionColour,
    classNameOptionColourContainer = _useMerchiFormContext.classNameOptionColourContainer;
  var color = option.colour,
    value = option.value;
  var containerClass = "merchi-embed-form_color-select-option ".concat(isChecked ? 'image-checked' : '', " ").concat(isAvailable ? 'cursor-pointer' : 'option-no-inventory');
  var optionCost = variationFieldOptionCostDetail(option);
  return /*#__PURE__*/_jsxs("div", {
    className: classNameOptionColourContainer,
    onClick: isAvailable ? doClick : undefined,
    children: [/*#__PURE__*/_jsxs("div", {
      className: containerClass,
      children: [/*#__PURE__*/_jsx(IconCheckedOrNoStock, {
        isChecked: isChecked,
        noStock: !isAvailable
      }), /*#__PURE__*/_jsx("div", {
        className: classNameOptionColour,
        style: {
          backgroundColor: color
        }
      })]
    }), /*#__PURE__*/_jsx(TooltipElement, {
      tooltip: String(value) + "".concat(!isAvailable ? ' - insufficient stock' : ''),
      children: /*#__PURE__*/_jsx("p", {
        className: "merchi-embed-form_color-select-description",
        children: value
      })
    }), sellerProductEditable && /*#__PURE__*/_jsx("small", {
      className: "d-block",
      children: optionCost
    }), /*#__PURE__*/_jsx(VariationFieldOptionDefaultInputs, {
      optionName: name,
      option: option
    })]
  });
}
export default VariationOptionColour;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJUb29sdGlwRWxlbWVudCIsInZhcmlhdGlvbkZpZWxkT3B0aW9uQ29zdERldGFpbCIsIlZhcmlhdGlvbkZpZWxkT3B0aW9uRGVmYXVsdElucHV0cyIsIkljb25DaGVja2VkT3JOb1N0b2NrIiwidXNlTWVyY2hpRm9ybUNvbnRleHQiLCJqc3giLCJfanN4IiwianN4cyIsIl9qc3hzIiwiVmFyaWF0aW9uT3B0aW9uQ29sb3VyIiwiX3JlZiIsImRvQ2xpY2siLCJfcmVmJGlzQXZhaWxhYmxlIiwiaXNBdmFpbGFibGUiLCJpc0NoZWNrZWQiLCJuYW1lIiwib3B0aW9uIiwic2VsbGVyUHJvZHVjdEVkaXRhYmxlIiwiX3VzZU1lcmNoaUZvcm1Db250ZXh0IiwiY2xhc3NOYW1lT3B0aW9uQ29sb3VyIiwiY2xhc3NOYW1lT3B0aW9uQ29sb3VyQ29udGFpbmVyIiwiY29sb3IiLCJjb2xvdXIiLCJ2YWx1ZSIsImNvbnRhaW5lckNsYXNzIiwiY29uY2F0Iiwib3B0aW9uQ29zdCIsImNsYXNzTmFtZSIsIm9uQ2xpY2siLCJ1bmRlZmluZWQiLCJjaGlsZHJlbiIsIm5vU3RvY2siLCJzdHlsZSIsImJhY2tncm91bmRDb2xvciIsInRvb2x0aXAiLCJTdHJpbmciLCJvcHRpb25OYW1lIl0sInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NvbXBvbmVudHMvVmFyaWF0aW9uT3B0aW9uQ29sb3VyLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIGNsaWVudCc7XG5pbXBvcnQgVG9vbHRpcEVsZW1lbnQgZnJvbSAnLi9Ub29sdGlwRWxlbWVudCc7XG5pbXBvcnQgeyB2YXJpYXRpb25GaWVsZE9wdGlvbkNvc3REZXRhaWwgfSBmcm9tICcuL3V0aWxzJztcbmltcG9ydCBWYXJpYXRpb25GaWVsZE9wdGlvbkRlZmF1bHRJbnB1dHMgZnJvbSAnLi9WYXJpYXRpb25GaWVsZE9wdGlvbkRlZmF1bHRJbnB1dHMnO1xuaW1wb3J0IEljb25DaGVja2VkT3JOb1N0b2NrIGZyb20gJy4vaWNvbnMvSWNvbkNoZWNrZWRPck5vU3RvY2snO1xuaW1wb3J0IHsgdXNlTWVyY2hpRm9ybUNvbnRleHQgfSBmcm9tICcuL01lcmNoaVByb2R1Y3RGb3JtUHJvdmlkZXInO1xuXG5pbnRlcmZhY2UgUHJvcHMge1xuICBkb0NsaWNrOiAoKSA9PiB2b2lkO1xuICBpc0F2YWlsYWJsZTogYm9vbGVhbjtcbiAgaXNDaGVja2VkOiBib29sZWFuO1xuICBuYW1lOiBzdHJpbmc7XG4gIG9wdGlvbjogYW55O1xuICBzZWxsZXJQcm9kdWN0RWRpdGFibGU/OiBib29sZWFuO1xufVxuXG5mdW5jdGlvbiBWYXJpYXRpb25PcHRpb25Db2xvdXIoe1xuICBkb0NsaWNrLFxuICBpc0F2YWlsYWJsZSA9IHRydWUsXG4gIGlzQ2hlY2tlZCxcbiAgbmFtZSxcbiAgb3B0aW9uLFxuICBzZWxsZXJQcm9kdWN0RWRpdGFibGUsXG59OiBQcm9wcykge1xuICBjb25zdCB7XG4gICAgY2xhc3NOYW1lT3B0aW9uQ29sb3VyLFxuICAgIGNsYXNzTmFtZU9wdGlvbkNvbG91ckNvbnRhaW5lcixcbiAgfSA9IHVzZU1lcmNoaUZvcm1Db250ZXh0KCk7XG4gIGNvbnN0IHsgY29sb3VyOiBjb2xvciwgdmFsdWUgfSA9IG9wdGlvbjtcbiAgY29uc3QgY29udGFpbmVyQ2xhc3MgPSBgbWVyY2hpLWVtYmVkLWZvcm1fY29sb3Itc2VsZWN0LW9wdGlvbiAke1xuICAgIGlzQ2hlY2tlZCA/ICdpbWFnZS1jaGVja2VkJyA6ICcnXG4gIH0gJHtpc0F2YWlsYWJsZSA/ICdjdXJzb3ItcG9pbnRlcicgOiAnb3B0aW9uLW5vLWludmVudG9yeSd9YDtcbiAgY29uc3Qgb3B0aW9uQ29zdCA9IHZhcmlhdGlvbkZpZWxkT3B0aW9uQ29zdERldGFpbChvcHRpb24pO1xuICByZXR1cm4gKFxuICAgIDxkaXZcbiAgICAgIGNsYXNzTmFtZT17Y2xhc3NOYW1lT3B0aW9uQ29sb3VyQ29udGFpbmVyfVxuICAgICAgb25DbGljaz17aXNBdmFpbGFibGUgPyBkb0NsaWNrIDogdW5kZWZpbmVkfVxuICAgID5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPXtjb250YWluZXJDbGFzc30+XG4gICAgICAgIDxJY29uQ2hlY2tlZE9yTm9TdG9jayBpc0NoZWNrZWQ9e2lzQ2hlY2tlZH0gbm9TdG9jaz17IWlzQXZhaWxhYmxlfSAvPlxuICAgICAgICA8ZGl2XG4gICAgICAgICAgY2xhc3NOYW1lPXtjbGFzc05hbWVPcHRpb25Db2xvdXJ9XG4gICAgICAgICAgc3R5bGU9e3sgYmFja2dyb3VuZENvbG9yOiBjb2xvciB9fVxuICAgICAgICAvPlxuICAgICAgPC9kaXY+XG4gICAgICA8VG9vbHRpcEVsZW1lbnRcbiAgICAgICAgdG9vbHRpcD17XG4gICAgICAgICAgU3RyaW5nKHZhbHVlKSArIGAkeyFpc0F2YWlsYWJsZSA/ICcgLSBpbnN1ZmZpY2llbnQgc3RvY2snIDogJyd9YFxuICAgICAgICB9XG4gICAgICA+XG4gICAgICAgIDxwIGNsYXNzTmFtZT0nbWVyY2hpLWVtYmVkLWZvcm1fY29sb3Itc2VsZWN0LWRlc2NyaXB0aW9uJz57dmFsdWV9PC9wPlxuICAgICAgPC9Ub29sdGlwRWxlbWVudD5cbiAgICAgIHtzZWxsZXJQcm9kdWN0RWRpdGFibGUgJiYgPHNtYWxsIGNsYXNzTmFtZT0nZC1ibG9jayc+e29wdGlvbkNvc3R9PC9zbWFsbD59XG4gICAgICA8VmFyaWF0aW9uRmllbGRPcHRpb25EZWZhdWx0SW5wdXRzIG9wdGlvbk5hbWU9e25hbWV9IG9wdGlvbj17b3B0aW9ufSAvPlxuICAgIDwvZGl2PlxuICApO1xufVxuXG5leHBvcnQgZGVmYXVsdCBWYXJpYXRpb25PcHRpb25Db2xvdXI7XG4iXSwibWFwcGluZ3MiOiJBQUFBLFlBQVk7O0FBQ1osT0FBT0EsY0FBYyxNQUFNLGtCQUFrQjtBQUM3QyxTQUFTQyw4QkFBOEIsUUFBUSxTQUFTO0FBQ3hELE9BQU9DLGlDQUFpQyxNQUFNLHFDQUFxQztBQUNuRixPQUFPQyxvQkFBb0IsTUFBTSw4QkFBOEI7QUFDL0QsU0FBU0Msb0JBQW9CLFFBQVEsNkJBQTZCO0FBQUMsU0FBQUMsR0FBQSxJQUFBQyxJQUFBO0FBQUEsU0FBQUMsSUFBQSxJQUFBQyxLQUFBO0FBV25FLFNBQVNDLHFCQUFxQkEsQ0FBQUMsSUFBQSxFQU9wQjtFQUFBLElBTlJDLE9BQU8sR0FBQUQsSUFBQSxDQUFQQyxPQUFPO0lBQUFDLGdCQUFBLEdBQUFGLElBQUEsQ0FDUEcsV0FBVztJQUFYQSxXQUFXLEdBQUFELGdCQUFBLGNBQUcsSUFBSSxHQUFBQSxnQkFBQTtJQUNsQkUsU0FBUyxHQUFBSixJQUFBLENBQVRJLFNBQVM7SUFDVEMsSUFBSSxHQUFBTCxJQUFBLENBQUpLLElBQUk7SUFDSkMsTUFBTSxHQUFBTixJQUFBLENBQU5NLE1BQU07SUFDTkMscUJBQXFCLEdBQUFQLElBQUEsQ0FBckJPLHFCQUFxQjtFQUVyQixJQUFBQyxxQkFBQSxHQUdJZCxvQkFBb0IsQ0FBQyxDQUFDO0lBRnhCZSxxQkFBcUIsR0FBQUQscUJBQUEsQ0FBckJDLHFCQUFxQjtJQUNyQkMsOEJBQThCLEdBQUFGLHFCQUFBLENBQTlCRSw4QkFBOEI7RUFFaEMsSUFBZ0JDLEtBQUssR0FBWUwsTUFBTSxDQUEvQk0sTUFBTTtJQUFTQyxLQUFLLEdBQUtQLE1BQU0sQ0FBaEJPLEtBQUs7RUFDNUIsSUFBTUMsY0FBYyw0Q0FBQUMsTUFBQSxDQUNsQlgsU0FBUyxHQUFHLGVBQWUsR0FBRyxFQUFFLE9BQUFXLE1BQUEsQ0FDOUJaLFdBQVcsR0FBRyxnQkFBZ0IsR0FBRyxxQkFBcUIsQ0FBRTtFQUM1RCxJQUFNYSxVQUFVLEdBQUd6Qiw4QkFBOEIsQ0FBQ2UsTUFBTSxDQUFDO0VBQ3pELG9CQUNFUixLQUFBO0lBQ0VtQixTQUFTLEVBQUVQLDhCQUErQjtJQUMxQ1EsT0FBTyxFQUFFZixXQUFXLEdBQUdGLE9BQU8sR0FBR2tCLFNBQVU7SUFBQUMsUUFBQSxnQkFFM0N0QixLQUFBO01BQUttQixTQUFTLEVBQUVILGNBQWU7TUFBQU0sUUFBQSxnQkFDN0J4QixJQUFBLENBQUNILG9CQUFvQjtRQUFDVyxTQUFTLEVBQUVBLFNBQVU7UUFBQ2lCLE9BQU8sRUFBRSxDQUFDbEI7TUFBWSxDQUFFLENBQUMsZUFDckVQLElBQUE7UUFDRXFCLFNBQVMsRUFBRVIscUJBQXNCO1FBQ2pDYSxLQUFLLEVBQUU7VUFBRUMsZUFBZSxFQUFFWjtRQUFNO01BQUUsQ0FDbkMsQ0FBQztJQUFBLENBQ0MsQ0FBQyxlQUNOZixJQUFBLENBQUNOLGNBQWM7TUFDYmtDLE9BQU8sRUFDTEMsTUFBTSxDQUFDWixLQUFLLENBQUMsTUFBQUUsTUFBQSxDQUFNLENBQUNaLFdBQVcsR0FBRyx1QkFBdUIsR0FBRyxFQUFFLENBQy9EO01BQUFpQixRQUFBLGVBRUR4QixJQUFBO1FBQUdxQixTQUFTLEVBQUMsNENBQTRDO1FBQUFHLFFBQUEsRUFBRVA7TUFBSyxDQUFJO0lBQUMsQ0FDdkQsQ0FBQyxFQUNoQk4scUJBQXFCLGlCQUFJWCxJQUFBO01BQU9xQixTQUFTLEVBQUMsU0FBUztNQUFBRyxRQUFBLEVBQUVKO0lBQVUsQ0FBUSxDQUFDLGVBQ3pFcEIsSUFBQSxDQUFDSixpQ0FBaUM7TUFBQ2tDLFVBQVUsRUFBRXJCLElBQUs7TUFBQ0MsTUFBTSxFQUFFQTtJQUFPLENBQUUsQ0FBQztFQUFBLENBQ3BFLENBQUM7QUFFVjtBQUVBLGVBQWVQLHFCQUFxQiJ9