'use client';

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
import { useController } from 'react-hook-form';
import { isBoolean } from 'lodash';
import VariationOptionColour from './VariationOptionColour';
import VariationOptionImage from './VariationOptionImage';
import VariationError from './VariationError';
import VariationLabel from './VariationLabel';
import { useMerchiFormContext } from './MerchiProductFormProvider';
import { jsx as _jsx } from "react/jsx-runtime";
import { Fragment as _Fragment } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
function determineBoolean(value) {
  return isBoolean(value) ? value : value === 'true' ? true : false;
}
function optionType(variation) {
  var _variation$variationF = variation.variationField,
    multipleSelect = _variation$variationF.multipleSelect,
    sellerProductEditable = _variation$variationF.sellerProductEditable;
  return determineBoolean(multipleSelect) || determineBoolean(sellerProductEditable) ? 'checkbox' : 'radio';
}
function VariationFieldOptionElement(_ref) {
  var disabled = _ref.disabled,
    index = _ref.index,
    inputType = _ref.inputType,
    name = _ref.name,
    option = _ref.option,
    variation = _ref.variation;
  var _useMerchiFormContext = useMerchiFormContext(),
    control = _useMerchiFormContext.control,
    getQuote = _useMerchiFormContext.getQuote;
  var _useController = useController({
      name: "".concat(name, ".value"),
      control: control
    }),
    field = _useController.field;
  var optionName = "".concat(name, ".options[").concat(index, "]");
  var selectableOptions = variation.selectableOptions,
    variationField = variation.variationField;
  var sellerProductEditable = variationField.sellerProductEditable;
  var id = option.id;
  var inputId = "".concat(name, ".options.id-").concat(id);
  var activeIds = field.value ? field.value.split(',') : [];
  var isActive = activeIds.includes(String(id));
  var isAvailable = selectableOptions[index] ? selectableOptions[index].available : true;
  var optionInputType = optionType(variation);
  var doClick = function doClick() {
    var updatedIds = _toConsumableArray(activeIds);
    if (sellerProductEditable || optionInputType === 'checkbox') {
      // Checkbox Logic
      if (!updatedIds.includes(String(id))) {
        updatedIds.push(String(id));
      } else {
        updatedIds = updatedIds.filter(function (existingId) {
          return existingId !== String(id);
        });
      }
    } else if (optionInputType === 'radio') {
      // Radio Logic
      updatedIds = [String(id)];
    }
    field.onChange(updatedIds.length ? updatedIds.join(',') : '');
    getQuote();
  };
  return /*#__PURE__*/_jsxs(_Fragment, {
    children: [/*#__PURE__*/_jsx("input", {
      style: {
        display: 'none'
      },
      checked: isActive,
      value: id,
      type: optionInputType,
      id: inputId,
      name: "".concat(name, ".value"),
      onChange: function onChange() {
        return true;
      },
      disabled: disabled
    }), inputType === 'image' ? /*#__PURE__*/_jsx(VariationOptionImage, {
      doClick: doClick,
      isChecked: isActive,
      isAvailable: isAvailable,
      name: "".concat(optionName, ".variationField.options[").concat(index, "]"),
      option: option,
      sellerProductEditable: sellerProductEditable
    }) : /*#__PURE__*/_jsx(VariationOptionColour, {
      doClick: doClick,
      isChecked: isActive,
      isAvailable: isAvailable,
      name: "".concat(optionName, ".variationField.options[").concat(index, "]"),
      option: option,
      sellerProductEditable: sellerProductEditable
    })]
  });
}
export var VariationSelectElements = function VariationSelectElements(_ref2) {
  var disabled = _ref2.disabled,
    _ref2$inputType = _ref2.inputType,
    inputType = _ref2$inputType === void 0 ? 'image' : _ref2$inputType,
    name = _ref2.name,
    variation = _ref2.variation;
  var variationField = variation.variationField;
  var _variationField$optio = variationField.options,
    options = _variationField$optio === void 0 ? [] : _variationField$optio;
  var isImage = inputType === 'image';
  return /*#__PURE__*/_jsxs("div", {
    className: isImage ? 'merchi-image-select-container' : '',
    children: [/*#__PURE__*/_jsx(VariationLabel, {
      forceHideCost: true,
      variationClassName: "merchi-embed-form_input".concat(isImage ? '-image' : '', "-select"),
      name: name,
      variation: variation
    }), /*#__PURE__*/_jsx("div", {
      className: isImage ? 'merchi-embed-form_image-select-option-container' : 'merchi-embed-form_color-select-container',
      children: options.map(function (option, index) {
        return /*#__PURE__*/_jsx(VariationFieldOptionElement, {
          disabled: disabled,
          index: index,
          inputType: inputType,
          name: name,
          option: option,
          variation: variation
        }, "variation-option-".concat(name, "-").concat(index));
      })
    }), /*#__PURE__*/_jsx(VariationError, {
      name: name
    })]
  });
};
export var VariationSelectImage = function VariationSelectImage(props) {
  return /*#__PURE__*/_jsx(VariationSelectElements, _objectSpread(_objectSpread({}, props), {}, {
    inputType: "image"
  }));
};
export var VariationSelectColour = function VariationSelectColour(props) {
  return /*#__PURE__*/_jsx(VariationSelectElements, _objectSpread(_objectSpread({}, props), {}, {
    inputType: "colour"
  }));
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,