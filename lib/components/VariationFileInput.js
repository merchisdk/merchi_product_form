'use client';

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
import { useState } from 'react';
import { isBoolean, isArray } from 'lodash';
import { IconFile } from './icons';
import { allowedFileTypes } from './utils';
import DropzoneInput from './DropzoneInput';
import InputHiddenStatic from './InputHiddenStatic';
import VariationError from './VariationError';
import VariationLabel from './VariationLabel';
import Collapse from './Collapse';
import { useFieldArray } from 'react-hook-form';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faChevronDown, faChevronUp, faCircleNotch, faDownload, faTimes, faTrashAlt } from '@fortawesome/free-solid-svg-icons';
import { useMerchiFormContext } from './MerchiProductFormProvider';
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
import { Fragment as _Fragment } from "react/jsx-runtime";
var LoadingIcon = function LoadingIcon() {
  return /*#__PURE__*/_jsx(FontAwesomeIcon, {
    icon: faCircleNotch,
    spin: true
  });
};
function FileListItem(_ref) {
  var file = _ref.file,
    disabled = _ref.disabled,
    doDelete = _ref.doDelete,
    loading = _ref.loading;
  var _useMerchiFormContext = useMerchiFormContext(),
    classNameFileListItem = _useMerchiFormContext.classNameFileListItem,
    classNameFileButtonDownload = _useMerchiFormContext.classNameFileButtonDownload,
    classNameFileButtonDelete = _useMerchiFormContext.classNameFileButtonDelete;
  return /*#__PURE__*/_jsx("li", {
    className: classNameFileListItem,
    children: /*#__PURE__*/_jsxs("div", {
      style: {
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center'
      },
      children: [/*#__PURE__*/_jsx("span", {
        className: "ml-3",
        children: file.name
      }), !disabled && /*#__PURE__*/_jsxs("div", {
        style: {
          marginLeft: 'auto'
        },
        children: [/*#__PURE__*/_jsx("a", {
          className: classNameFileButtonDownload,
          href: file.downloadUrl,
          download: true,
          children: /*#__PURE__*/_jsx(FontAwesomeIcon, {
            icon: faDownload
          })
        }), doDelete && /*#__PURE__*/_jsx("button", {
          className: classNameFileButtonDelete,
          onClick: doDelete,
          disabled: Boolean(loading),
          children: loading ? /*#__PURE__*/_jsx(LoadingIcon, {}) : /*#__PURE__*/_jsx(FontAwesomeIcon, {
            icon: faTrashAlt
          })
        })]
      })]
    })
  });
}
function VariationFilesList(_ref2) {
  var files = _ref2.files;
  var _useMerchiFormContext2 = useMerchiFormContext(),
    classNameFileListItemContainer = _useMerchiFormContext2.classNameFileListItemContainer;
  return /*#__PURE__*/_jsx("ul", {
    className: classNameFileListItemContainer,
    children: files.map(function (f, i) {
      return /*#__PURE__*/_jsx(FileListItem, {
        file: f
      }, "".concat(i, "-publicfile"));
    })
  });
}
function determineBoolean(value) {
  return isBoolean(value) ? value : value === 'true' ? true : false;
}
function VariationFile(_ref3) {
  var deleteVariationFile = _ref3.deleteVariationFile,
    file = _ref3.file,
    index = _ref3.index,
    inputName = _ref3.inputName;
  var _useMerchiFormContext3 = useMerchiFormContext(),
    classNameFilePreviewContainer = _useMerchiFormContext3.classNameFilePreviewContainer,
    classNameFilePreviewIconWrapper = _useMerchiFormContext3.classNameFilePreviewIconWrapper;
  return /*#__PURE__*/_jsxs("div", {
    className: classNameFilePreviewContainer,
    onClick: function onClick() {
      return deleteVariationFile(file);
    },
    children: [/*#__PURE__*/_jsx("div", {
      className: classNameFilePreviewIconWrapper,
      onClick: function onClick() {
        return deleteVariationFile(file);
      },
      children: /*#__PURE__*/_jsx(FontAwesomeIcon, {
        icon: faTimes,
        className: "close-icon"
      })
    }), /*#__PURE__*/_jsx(IconFile, {
      file: file
    }), /*#__PURE__*/_jsx(InputHiddenStatic, {
      name: "".concat(inputName, "[").concat(index, "].id"),
      rules: {
        required: true
      },
      value: file.id
    })]
  });
}
function ButtonUploadedFiles(_ref4) {
  var files = _ref4.files,
    isOpen = _ref4.isOpen,
    onClick = _ref4.onClick;
  var hasFiles = Array.isArray(files) && files.length > 0;
  var text = files.length !== 1 ? "".concat(files.length, " files selected") : '1 file selected';
  var icon = isOpen ? faChevronUp : faChevronDown;
  var _useMerchiFormContext4 = useMerchiFormContext(),
    classNameFileUploadButton = _useMerchiFormContext4.classNameFileUploadButton;
  return /*#__PURE__*/_jsxs("button", {
    className: classNameFileUploadButton,
    disabled: files.length === 0,
    onClick: onClick,
    children: [hasFiles ? text : 'No files selected', ' ', hasFiles && /*#__PURE__*/_jsx(FontAwesomeIcon, {
      icon: icon
    })]
  });
}
function VariationFileInput(_ref5) {
  var disabled = _ref5.disabled,
    name = _ref5.name,
    variation = _ref5.variation;
  var _useMerchiFormContext5 = useMerchiFormContext(),
    classNameFileUploadContainer = _useMerchiFormContext5.classNameFileUploadContainer,
    control = _useMerchiFormContext5.control;
  var inputName = "".concat(name, ".variationFiles");
  var variationField = variation.variationField;
  var allowFileMultiple = variationField.allowFileMultiple,
    placeholder = variationField.placeholder,
    required = variationField.required,
    showFilePreview = variationField.showFilePreview;
  var _useFieldArray = useFieldArray({
      control: control,
      keyName: 'fileId',
      name: inputName,
      rules: {
        required: required
      }
    }),
    append = _useFieldArray.append,
    fields = _useFieldArray.fields,
    remove = _useFieldArray.remove;
  var hasFiles = isArray(fields) && fields.length;
  var _useState = useState(Boolean(hasFiles)),
    _useState2 = _slicedToArray(_useState, 2),
    isOpen = _useState2[0],
    setIsOpen = _useState2[1];
  var toggle = function toggle() {
    return setIsOpen(!isOpen);
  };
  var _allowFileMultiple = determineBoolean(allowFileMultiple);
  var _showFilePreview = determineBoolean(showFilePreview);
  function handleUploadSuccess(fs) {
    console.log('trying to append the file,', fs);
    if (_allowFileMultiple) {
      append(fs);
    } else {
      if (hasFiles) remove(0);
      append(fs[0]);
    }
  }
  return /*#__PURE__*/_jsxs("div", {
    className: classNameFileUploadContainer,
    children: [/*#__PURE__*/_jsx(VariationLabel, {
      variationClassName: "merchi-embed-form_input-file",
      name: name,
      variation: variation
    }), /*#__PURE__*/_jsx(DropzoneInput, {
      accept: allowedFileTypes(variationField),
      disabled: disabled,
      multiple: allowFileMultiple,
      onUploadSuccess: handleUploadSuccess,
      placeholder: placeholder
    }), /*#__PURE__*/_jsx(VariationError, {
      name: name
    }), /*#__PURE__*/_jsx("div", {
      className: "uploaded-variation-files",
      children: fields.map(function (file, index) {
        return _showFilePreview ? /*#__PURE__*/_jsx("fieldset", {
          className: "d-inline-block mr-2",
          children: /*#__PURE__*/_jsx(VariationFile, {
            deleteVariationFile: function deleteVariationFile() {
              return remove(index);
            },
            file: file,
            index: index,
            inputName: inputName
          }, "".concat(name, "-file-key-").concat(index))
        }, file.fileId) : /*#__PURE__*/_jsx(InputHiddenStatic, {
          name: "".concat(inputName, "[").concat(index, "].id"),
          rules: {
            required: true
          },
          value: file.id
        }, "".concat(name, "-file-key-").concat(index));
      })
    }), !_showFilePreview && /*#__PURE__*/_jsxs(_Fragment, {
      children: [/*#__PURE__*/_jsx(Collapse, {
        isOpen: Boolean(isOpen),
        children: /*#__PURE__*/_jsx(VariationFilesList, {
          files: fields
        })
      }), /*#__PURE__*/_jsx("div", {
        className: "clearfix mb-3",
        children: /*#__PURE__*/_jsx(ButtonUploadedFiles, {
          files: fields,
          isOpen: isOpen,
          onClick: toggle
        })
      })]
    })]
  });
}
export default VariationFileInput;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,