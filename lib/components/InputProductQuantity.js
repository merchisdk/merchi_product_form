'use client';

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
import { useController } from 'react-hook-form';
import ProductUnitPrice from './ProductUnitPrice';
import VariationError from './VariationError';
import { useMerchiFormContext } from './MerchiProductFormProvider';
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
function InputProductQuantity(_ref) {
  var disabled = _ref.disabled,
    _ref$name = _ref.name,
    name = _ref$name === void 0 ? 'quantity' : _ref$name;
  var _useMerchiFormContext = useMerchiFormContext(),
    classNameInputContainer = _useMerchiFormContext.classNameInputContainer,
    classNameInput = _useMerchiFormContext.classNameInput,
    classNameQuantityLabelContainer = _useMerchiFormContext.classNameQuantityLabelContainer,
    job = _useMerchiFormContext.job,
    control = _useMerchiFormContext.control,
    getQuote = _useMerchiFormContext.getQuote,
    product = _useMerchiFormContext.product;
  var groupVariationFields = product.groupVariationFields,
    minimum = product.minimum;
  var validators = {
    positive: function positive(value) {
      return parseInt(value) > 0;
    },
    required: {
      value: true,
      message: 'Quantity is required'
    },
    valueAsNumber: true
  };
  if (minimum) {
    validators.min = {
      value: minimum,
      message: "".concat(product.name, " can not be less than ").concat(minimum)
    };
  }
  var _useController = useController({
      name: name,
      control: control,
      rules: validators
    }),
    field = _useController.field;
  return /*#__PURE__*/_jsxs("div", {
    className: classNameInputContainer,
    children: [/*#__PURE__*/_jsx("div", {
      className: classNameQuantityLabelContainer,
      children: /*#__PURE__*/_jsxs("div", {
        children: [/*#__PURE__*/_jsx("span", {
          children: "Quantity"
        }), ' ', /*#__PURE__*/_jsxs("small", {
          children: [/*#__PURE__*/_jsx(ProductUnitPrice, {}), " ", minimum > 1 && "(MOQ of ".concat(minimum, ")")]
        })]
      })
    }), groupVariationFields && groupVariationFields.length ? /*#__PURE__*/_jsx("div", {
      children: job.quantity
    }) : /*#__PURE__*/_jsx("input", _objectSpread(_objectSpread({
      disabled: disabled,
      min: "0",
      type: "number",
      className: classNameInput
    }, field), {}, {
      onChange: function onChange(e) {
        field.onChange(e);
        getQuote();
      }
    })), /*#__PURE__*/_jsx(VariationError, {
      name: name
    })]
  });
}
export default InputProductQuantity;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,